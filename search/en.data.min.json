[{"id":0,"href":"/","title":"GeekOops","parent":"","content":"GeekOops is a collection of awesome sysops utilities for automated deployment with a strong focus on openSUSE. Depending on your mood it\u0026rsquo; pronounced Geeko-Ops or Geek Oops, both is just fine.\nThe project mainly lives on GitHub and consists of a set of ansible roles for automated deployment of certain services. The roles are written to be easily usable, tested, minimal yet configurable.\nSimplicity is key for GeekOops. Each role is aimed to be self-sufficient, without crazy and sometimes unsolvable dependency chains. Roles are in general automatically tested to ensure, that they remain functional over time.\nGeekOops was started in SUSE Hackweek 20 and continued in SUSE Hack Week 21. Most importantly: Have a lot of fun!\nGetting started Checkout the nginx tutorial post for getting your hands dirty in a step-by-step guide. A more complete how-to is the example webserver post, where we\u0026rsquo;re setting up a simple nginx+php-fpm webserver on openSUSE Leap.\nRoles Visit the roles page for an overview of all available roles.\n"},{"id":1,"href":"/pages/idea/","title":"Idea","parent":"Pages","content":"geekoops is a collection of generic devops and sysops recipes with a strong focus on the openSUSE distribution. The main idea is to provide tested and simple-to-use building blocks for system administrator and engineers to easily setup and maintain their systems.\nI started this project during the SUSE Hackweek 20 based on a personal need for some generic and easy-to-use ansible roles. The project was born from the believe that many more people have the same need and building something publicly available might help the one or another person in fulfilling its daily job.\nSimplicity is key The core idea is to build re-usable and simple deployment recipes that work well together but are loosely coupled. Simplicity is favored over feature completeness, and automated testing heavily encourage to ensure that the project remains healthy over time.\nOften some commonly used ansible support many configuration parameters and scenarios but do not work well together with openSUSE. Many moving parts means many corner cases and often those roles do not work well on openSUSE distributions, because either something missing or something is configured just different enough to make the orchestration tools stumble.\nThis is what geekoops wants to make different: The recipes here have a focus on openSUSE but should remain simple enough, so that they should work on other distributions as well or at least lower the threshold of making them work with other distributions.\nSimplicity often is a synonymous for maintainability and a key ingredient to pass the test of time.\nin a nutshell:\ngeekoops heavily encourages the keep-it-simple-stupid principle\n"},{"id":2,"href":"/pages/","title":"Pages","parent":"GeekOops","content":""},{"id":3,"href":"/pages/contribute/","title":"Contribute","parent":"Pages","content":" How can I contribute? GeekOops is an open community project, i.e. everyone is welcome to improve existing roles or submit new repositories that fit the general idea.\nThe project is managed on github. You can contribute by\nCreating issues on individual roles Creating Pull Requests to improve existing roles Push a new repository Because the number of participants is still low we don\u0026rsquo;t have a hangout place yet but this might change over time.\nPushing a new repository The project is open for submission of new automation recipes. For now it consists mostly of ansible roles but submissions that fit the general idea of generic sysop/devops building blocks are more than welcome.\nNew submissions must fulfill two requirements to be accepted:\nFit into the general idea of the project The role must contain some form of automatic testing (with exceptions) Exceptions to the automatic testing rule can be that the role cannot be (efficiently) tested or that testing does not make sense. Exceptions are allowed but must be justifiable.\nBecoming a geekoops member Ask to become a member by creating a new issue in the geekoops repository.\n"},{"id":4,"href":"/tags/nginx/","title":"nginx","parent":"Tags","content":""},{"id":5,"href":"/posts/","title":"Posts","parent":"GeekOops","content":""},{"id":6,"href":"/tags/","title":"Tags","parent":"GeekOops","content":""},{"id":7,"href":"/tags/tutorial/","title":"tutorial","parent":"Tags","content":""},{"id":8,"href":"/posts/20210505-tutorial-nginx/","title":"Tutorial: nginx","parent":"Posts","content":"Welcome to GeekOops! This post acts as a tutorial to start with the first role of this project: Installing and configuring a nginx webserver via the geekoops-nginx role.\nTutorial Let\u0026rsquo;s assume we want to roll this role out on our imaginary jellyfish server. We need to have root ssh access to jellyfish. Ansible also supports sudo, but this is not covered here. So first make sure you can do the following\n# Make sure you can login into our imaginary test server as root! ssh root@jellyfish All of the next steps will take place in a temporary directory. I in general keep all my ansible stuff in a dedicated ansible folder in my home directory, for this tutorial we are going to use a empty new folder, as you might want to dump everything afterwards.\n# For this tutorial we start in a virgin new folder mkdir jellyfish-sandbox cd jellyfish-sandbox Now, clone the geekoops-nginx role\ngit clone https://github.com/GeekOops/geekoops-nginx Ansible operates with so-called Playbooks. Playbooks are a yaml file that tell ansible what to do. Roughly it consists of a definition of which hosts ansible should operate on and what to do there. For this example we are going to use the following playbook, which you store as jellyfish.yml:\n--- # Example playbook for nginx on jellyfish - hosts: jellyfish user: root roles: - role: geekoops-nginx vars: setup_default_page: true default_page_hostname: \u0026quot;{{ansible_host}}\u0026quot; config_firewall: true firewall_zone: \u0026quot;public\u0026quot; Last thing is to create a custom inventory. Although you might have put jellyfish into your ~/.ssh/config already, ansible needs also to know that this is a host for it. For that we create a file called inventory with this simple line:\njellyfish Ok, when you have done that, then we\u0026rsquo;re ready to rock. Run ansible-playbook with the inventory and the playbook:\nansible-playbook -i inventory jellyfish.yml Ansible now runs the playbook, nginx will be installed and the firewall will open the http (80) and https (443) port for you on the \u0026ldquo;public\u0026rdquo; zone.\nDone!\n"},{"id":9,"href":"/posts/20210326-example-webserver/","title":"Example: Webserver (nginx+php-fpm)","parent":"Posts","content":"In this post we are going to setup our example jellyfish host to run nginx and php-fpm. Checkout the provided jellyfish.yml playbook for a quickstart. This example playbook also configures a virtual host and creates a typical phpinfo.php file to test your setup.\nThis provides a solid example to setup your own webserver running nginx with php-fpm atop which you can later on run other php applications like nextcloud or MediaWiki.\nPlaybook The jellyfish.yml example playbook sets up a webserver with nginx and php-fpm:\n--- - hosts: jellyfish user: root roles: - role: geekoops-nginx vars: config_firewall: true firewall_zone: \u0026#34;public\u0026#34; - role: geekoops-php-fpm vars: apcu_enable: true apcu_shm_size: 32M php_memlimit: 256M php_maxuploadsize: 64M tasks: - name: Deploy jellyfish config for nginx copy: content: | server { listen 80 default_server; listen [::]:80 default_server; server_name jellyfish; root /srv/www/htdocs; location / { try_files $uri $uri/ =404; } location ~ \\.php$ { fastcgi_pass unix:/run/php-fpm/php-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } dest: \u0026#34;/etc/nginx/vhosts.d/jellyfish.conf\u0026#34; group: \u0026#34;root\u0026#34; owner: \u0026#34;root\u0026#34; mode: 0754 notify: Restart nginx - name: Ensure nginx is in the www group user: name: nginx groups: www append: yes notify: Restart nginx - name: Deploy phpinfo script copy: content: \u0026#34;\u0026lt;?php phpinfo(); phpinfo(INFO_MODULES); ?\u0026gt;\u0026#34; dest: \u0026#34;/srv/www/htdocs/phpinfo.php\u0026#34; group: \u0026#34;www\u0026#34; owner: \u0026#34;wwwrun\u0026#34; mode: 0754 # Note: The current php-fpm apparmor profile does not allow access to /srv/www. # We set app-armor to complain in this role. Note that you should use e.g. # `yast apparmor` to update your AppArmor profile instead of disabling AppArmor # as a whole! - name: Ensure aa-complain is installed package: name: apparmor-utils state: present - name: Put app-armor to complain mode shell: aa-complain /etc/apparmor.d/php-fpm handlers: - name: Restart nginx systemd: name: nginx state: restarted Step-by-setup guid Let\u0026rsquo;s start with the basics. First ensure you have ansible installed on your host machine\nsudo zypper in ansible Then, we need a working directory, let\u0026rsquo;s say jellyfish.\nmkdir jellyfish cd jellyfish All next steps should be run in this directory.\nWe first setup a JeOS VM as our playing ground. Skip down to the Running the playbook section in case you have already your VM up and running and just want the playbook to run.\nReady in under 5 minutes: openSUSE JeOS No installation required! This VM image is ready in under 5 minutes.\nThe most easy way of just getting a openSUSE Leap VM running, is to use the JeOS image. JeOS (or MinimalVM) is a slimmed down image that contains just enough to run as a VM. It boots directly from the provided qcow2 image and does not need to be installed. A handful of configuration steps in the first-run wizard and you\u0026rsquo;re good to go! You have your openSUSE Leap VM up and running in under 5 minutes. JeOS can be downloaded from https://get.opensuse.org/leap in Alternative Downloads\u0026quot;. Download the KVM and XEN image, import it into your virt-manager and we\u0026rsquo;re ready to go.\nJeOS VM: Step-by-step guide Back in our jellyfish directory, we first download the VM image (which is also our hard disk)\n$ wget -O jeos-openSUSE-Leap-15_4.qcow2 https://download.opensuse.org/distribution/leap/15.4/appliances/openSUSE-Leap-15.4-JeOS.x86_64-kvm-and-xen.qcow2 Create a qcow2 overlay, so that multiple machines could in principle use the same qcow2 image as base and we only store the overlay in a separate image file:\nqemu-img create -b jeos-openSUSE-Leap-15_4.qcow2 -f qcow2 -F qcow2 jellyfish.qcow2 30G Then we run virt-install to setup and run our jellyfish server:\n$ virt-install --name=jellyfish --file=$PWD/jellyfish.qcow2 --vcpus=2 --ram=2048 --os-variant=opensuse15.4 --boot hd After a handful of configuration steps, you have a functional system in just some minutes.\nAs you can see in this gif, it only took me 1:30 minutes to get a functional openSUSE Leap 15.4 system using the JeOS image.\nProvide ssh access for ansible Ansible requies ssh access to the machines it is expected to provision. In this example we will assign the jellyfish hostname to the VM IP address via /etc/hosts. In a more mature environment you might need to update the DHCP server but that\u0026rsquo;s outside of the scope of this tutorial.\nFirst we need to find out the IP address of the VM. For that, we log in via the virt-manager console, then run ip address (or ip a in short) to list the currently assigned IP addresses. See the 192.168.122.116 in the output below:\n# ip a 1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 52:54:00:85:0f:7a brd ff:ff:ff:ff:ff:ff inet 192.168.122.116/24 brd 192.168.122.255 scope global eth0 valid_lft forever preferred_lft forever inet6 fe80::5054:ff:fe85:f7a/64 scope link valid_lft forever preferred_lft forever Now, as root on your local machine, add the IP address to /etc/hosts otherwise you will need to replace jellyfish by the ip address in all following commands. We have been adding the last line 192.168.122.116 jellyfish to your /etc/hosts file.\nvim /etc/hosts # IP-Address Full-Qualified-Hostname Short-Hostname # 127.0.0.1\tlocalhost # special IPv6 addresses ::1 localhost ipv6-localhost ipv6-loopback fe00::0 ipv6-localnet ff00::0 ipv6-mcastprefix ff02::1 ipv6-allnodes ff02::2 ipv6-allrouters ff02::3 ipv6-allhosts ::1 hotdog [...] # This is what we add here to assign an IP our amazing jellyfish VM 192.168.122.116 jellyfish Now let\u0026rsquo;s copy the ssh-key from your host via\nssh-copy-id root@jellyfish Done. Check if you can login via ssh root@jellyfish. Now would be a good time to power off your VM and create a VM snapshot, so in case something goes wrong in the next step you have your \u0026ldquo;saved game\u0026rdquo; slot you can always rollback to.\nRemember to remove the jellyfish from /etc/hosts afterwards, in case you don\u0026rsquo;t want to keep your jellyfish :-)\nRunning the playbook First ensure (one more time), that you have root access to jellyfish\nssh root@jellyfish Back in our jellyfish directory, we need to get the roles and the playbook:\n# Download the ansible repositories git clone https://github.com/GeekOops/geekoops-nginx git clone https://github.com/GeekOops/geekoops-php-fpm # Download playbook curl -o jellyfish.yml https://geekoops.github.io/posts/20210326-example-webserver/jellyfish.yml Next we need to create an inventory. And inventory is a list of hosts or host groups that belongs to a certain deployment. In our basic setup we only hold the jellyfish host, but you can see this really as an inventory of all servers that you would manage via ansible. Let\u0026rsquo;s stay simple here:\n# Create inventory echo \u0026quot;jellyfish\u0026quot; \u0026gt; inventory We now have all ingredients that we need. We have the playbook, we have the roles and we have the inventory. So from here nothing is holding us back, let\u0026rsquo;s fire ansible up and run the playbook using ansible-playbook:\nansible-playbook -i inventory jellyfish.yml # Use the custom inventory instead of the default (/etc/ansible) Go grab something to drink and let ansible sparkle it\u0026rsquo;s magical fairy dust. When you return the playbook has hopefully setup your machines to the desired state:\nWhat you hope for is to see something like the following after about 1-2 minutes of ansible running:\nThe ok=22 changed=17 failed=0 tells you that ansible was successful.\nNow in your browser navigate to http://jellyfish/phpinfo.php and you should see, the output of phpinfo:\nCongratulations. You have successfully deployed a nginx + php-fpm webserver instance. Time to celebrate!\n"},{"id":10,"href":"/posts/20210326-next/","title":"Ansible NEXT server","parent":"Posts","content":"The geekoops-next ansible role makes it easy to setup your own PXE boot server. It configures dnsmasq to run a DHCP and TFTP server, from which your PXE clients can boot from. You can turn the DNS functionality of dnsmasq off, so that it is possible to run this PXE server next to another DNS server on the same host.\nThis role also extracts a minimum syslinux installation into your tftp directory. So, after deploying this role, your clients should be able to boot from this PXE server, but it appears empty.\nCurrently this role only supports legacy boot.\nExample The following playbook installs this PXE boot server on jellyfish. However we want to use another dhcp server for handing out the leases, so that we configure dnsmasq to act as proxy. This is useful if you want to run your PXE server alongside another DHCP server, like for example in a network configuration where your Fritzbox takes care of the DHCP. Our example is in a libvirt environment, so we let the default libvirt DHCP server (192.168.122.1) handle dhcp:\n- hosts: jellyfish roles: - role: geekoops-next vars: config_firewall: true firewall_zone: \u0026quot;public\u0026quot; dhcp_range: \u0026quot;192.168.122.1,proxy,255.255.255.0\u0026quot; prompt: \u0026quot;My awesome network boot server\u0026quot; Testing If jellyfish runs as virtual machine in your default libvirt domain, you can now create a new virtual machine that boots from the network.\nIn virt-manager, create a new Virtual machine, with \u0026ldquo;Manual Boot\u0026rdquo;. Use any Linux system, even \u0026ldquo;Generic OS\u0026rdquo; just works fine. We don\u0026rsquo;t need a disk for booting, so that one can be deselected. Now, if you boot the machine, you will see the boot menu from the PXE server\n"},{"id":11,"href":"/posts/20210326-pureftpd/","title":"Ansible PureFTPd","parent":"Posts","content":"The geekoops-pureftpd role is a configurable ansible role for setting up a PureFTPd ftp server. I choose PureFTPd because it appears to be more secure than ProFTPd. In comparison to vsftp, one server program can run both IPv4 and IPv6.\nThis role works on openSUSE Leap.\nRole Variables PureFTPd is a highly configurable ansible role. See the following list of possible variables, but you probably don\u0026rsquo;t need much of them.\nValue Description Default config_firewall Apply firewall rules false firewall_zone Firewall zone where ftp will be allowed public MaxClientsNumber Maximum number of anonymous clients 10 MaxClientsPerIP Maximum clients per IP address 3 AnonymousOnly Forbid user login yes NoAnonymous Disallow anonymous no PAMAuthentication Allow PAM authentication no MaxIdleTime Maximum idle time in minutes before disconnecting 5 MaxLoad Disallow anonymous download if system load is above this value 4 PassivePortMin Passive port range - lower bound 30000 PassivePortMax Passive port range - upper bound 30100 ForcePassiveIP Use this IP for passive mode, useful if PureFTPd is behind a NAT \u0026quot;\u0026quot; (disabled) Bind Bind address and port (e.g. 127.0.0.1,21) \u0026quot;\u0026quot; (disabled) Bandwidth Max bandwidth for all users in KB/s \u0026quot;\u0026quot; (disabled) TrustedIP Allow login only from this IP \u0026quot;\u0026quot; (disabled) MaxUserSessions Maximum number of open session per user 3 MaxAnonSessions Maximum number of open anonymous sessions 20 IPV4Only Bind to IPv4 only. By default we bind to IPv4 and IPv6 no IPV6Only Bind to IPv6 only. By default we bind to IPv4 and IPv6 no Example With this example playbook we setup a PureFTPd server that allows only anonymous access. Because we have only some resources, we allow up to 100 session in parallel.\n- hosts: jellyfish user: root roles: - role: geekoops-pureftpd vars: config_firewall: true AnonymousOnly: yes PassivePortMin: 30000 PassivePortMax: 31000 MaxAnonSessions: 100 "},{"id":12,"href":"/posts/20210326-php-fpm/","title":"Ansible php-fpm","parent":"Posts","content":"The geekoops-php-fpm role is intended as a standalone php-fpm deployment that works in conjunction with any webserver. I use it with nginx in production. In principle it should also work together with apache2, but that\u0026rsquo;s something currently untested.\nThis role works with openSUSE Leap and is intended to ship enough requirements for most web applications to run. I run it in conjunction with Mediawiki and Nextcloud.\nRole Variables This ansible role comes with a large set of configuration parameters. Among others here are some of the most important ones:\nValue Description Default configure_php_ini Configrue the php.ini file true configure_php_fpm Configure php-fpm configuration files true enable_php_fpm Enable php-fpm service true apcu_enable Enable the APCu cache false apcu_shm_size APCu cache size 32M php_memlimit PHP memory limit 128M php_uploads Enable PHP uploads On php_maxuploadsize Max upload size 256M php_maxuploads Max uploads in a request 20 Example This role installs only php-fpm. It works best together with the nginx role, but you can also use it as a standalone:\n--- - hosts: jellyfish user: root roles: - role: geekoops-php-fpm vars: apcu_enable: true apcu_shm_size: 32M php_memlimit: 256M php_maxuploadsize: 64M A more extended example of this role together with nginx can be found in the Example Webserver post.\n"},{"id":13,"href":"/posts/20210326-nginx/","title":"Ansible nginx","parent":"Posts","content":"The geekoops-nginx role is a simple Ansible role to install and setup nginx on a openSUSE Leap server. This is the first role of the project and kept as simple as possible: It installs nginx and optionally opens the firewall ports.\nExample --- # Example playbook for nginx on jellyfish - hosts: jellyfish user: root roles: - role: geekoops-nginx vars: setup_default_page: true default_page_hostname: \u0026#34;{{ansible_host}}\u0026#34; config_firewall: true firewall_zone: \u0026#34;public\u0026#34; "},{"id":14,"href":"/categories/","title":"Categories","parent":"GeekOops","content":""},{"id":15,"href":"/pages/roles/","title":"Roles","parent":"Pages","content":"Here on this page a list of all available recipes is listed by category.\nAnsible roles nginx - simple nginx configuration php-fpm - Configure php-fpm in openSUSE Leap PureFTPd - Setting up a ftp server using pureftpd NEXT - Ansible role for setting up a PXE boot server "}]