[{"id":0,"href":"/posts/20210326-next/","title":"Ansible NEXT server","parent":"Posts","content":"The geekoops-next ansible role makes it easy to setup your own PXE boot server. It configures dnsmasq to run a DHCP and TFTP server, from which your PXE clients can boot from. You can turn the DNS functionality of dnsmasq off, so that it is possible to run this PXE server next to another DNS server on the same host.\nThis role also extracts a minimum syslinux installation into your tftp directory. So, after deploying this role, your clients should be able to boot from this PXE server, but it appears empty.\nCurrently this role only supports legacy boot.\nExample    The following playbook installs this PXE boot server on jellyfish. However we want to use another dhcp server for handing out the leases, so that we configure dnsmasq to act as proxy. This is useful if you want to run your PXE server alongside another DHCP server, like for example in a network configuration where your Fritzbox takes care of the DHCP. Our example is in a libvirt environment, so we let the default libvirt DHCP server (192.168.122.1) handle dhcp:\n- hosts: jellyfish roles: - role: geekoops-next vars: config_firewall: true firewall_zone: \u0026quot;public\u0026quot; dhcp_range: \u0026quot;192.168.122.1,proxy,255.255.255.0\u0026quot; prompt: \u0026quot;My awesome network boot server\u0026quot;  Testing    If jellyfish runs as virtual machine in your default libvirt domain, you can now create a new virtual machine that boots from the network.\nIn virt-manager, create a new Virtual machine, with \u0026ldquo;Manual Boot\u0026rdquo;. Use any Linux system, even \u0026ldquo;Generic OS\u0026rdquo; just works fine. We don\u0026rsquo;t need a disk for booting, so that one can be deselected. Now, if you boot the machine, you will see the boot menu from the PXE server\n"},{"id":1,"href":"/","title":"GeekOops","parent":"","content":"Collection of awesome SysOps utilities for automated deployment. It is pronounced Geeko-Ops or Geek Oops, depending on your mood :-)\nThe project lives on GitHub and currently consists of a set of ansible roles for automated deployment of certain services. The roles are written to be easily usable, minimal yet configurable.\nMinimalism is key for GeekOops. Each role is aimed to be self-sufficient, without additional and crazy dependency chains. Each role is also automatically tested to ensure, that the roles remain functional over time.\nGeekOops was started in SUSE Hackweek 2021. Have a lot of fun!\nGetting started    Checkout the ansible nginx post for a quick tutorial about how to use ansible and my roles.\n"},{"id":2,"href":"/posts/","title":"Posts","parent":"GeekOops","content":""},{"id":3,"href":"/posts/20210326-pureftpd/","title":"Ansible PureFTPd","parent":"Posts","content":"The geekoops-pureftpd role is a configurable ansible role for setting up a PureFTPd ftp server. I choose PureFTPd because it appears to be more secure than ProFTPd. In comparison to vsftp, one server program can run both IPv4 and IPv6.\nThis role works on openSUSE Leap.\nRole Variables    PureFTPd is a highly configurable ansible role. See the following list of possible variables, but you probably don\u0026rsquo;t need much of them.\n   Value Description Default     config_firewall Apply firewall rules false   firewall_zone Firewall zone where ftp will be allowed public   MaxClientsNumber Maximum number of anonymous clients 10   MaxClientsPerIP Maximum clients per IP address 3   AnonymousOnly Forbid user login yes   NoAnonymous Disallow anonymous no   PAMAuthentication Allow PAM authentication no   MaxIdleTime Maximum idle time in minutes before disconnecting 5   MaxLoad Disallow anonymous download if system load is above this value 4   PassivePortMin Passive port range - lower bound 30000   PassivePortMax Passive port range - upper bound 30100   ForcePassiveIP Use this IP for passive mode, useful if PureFTPd is behind a NAT \u0026quot;\u0026quot; (disabled)   Bind Bind address and port (e.g. 127.0.0.1,21) \u0026quot;\u0026quot; (disabled)   Bandwidth Max bandwidth for all users in KB/s \u0026quot;\u0026quot; (disabled)   TrustedIP Allow login only from this IP \u0026quot;\u0026quot; (disabled)   MaxUserSessions Maximum number of open session per user 3   MaxAnonSessions Maximum number of open anonymous sessions 20   IPV4Only Bind to IPv4 only. By default we bind to IPv4 and IPv6 no   IPV6Only Bind to IPv6 only. By default we bind to IPv4 and IPv6 no    Example    With this example playbook we setup a PureFTPd server that allows only anonymous access. Because we have only some resources, we allow up to 100 session in parallel.\n - hosts: jellyfish user: root roles: - role: geekoops-pureftp vars: config_firewall: true AnonymousOnly: yes PassivePortMin: 30000 PassivePortMax: 31000 MaxAnonSessions: 100 "},{"id":4,"href":"/posts/20210326-php-fpm/","title":"Ansible php-fpm","parent":"Posts","content":"The geekoops-php-fpm role is intended as a standalone php-fpm deployment that works in conjunction with any webserver. I use it with nginx in production. In principle it should also work together with apache2, but that\u0026rsquo;s something currently untested.\nThis role works with openSUSE Leap and is intended to ship enough requirements for most web applications to run. I run it in conjunction with Mediawiki and Nextcloud.\nRole Variables    This ansible role comes with a minimal set of configuration parameters.\n   Value Description Default     configure_php_ini Configrue the php.ini file true   configure_php_fpm Configure php-fpm configuration files true   enable_php_fpm Enable php-fpm service true   apcu_enable Enable the APCu cache false   apcu_shm_size APCu cache size 32M   php_memlimit PHP memory limit 128M   php_uploads Enable PHP uploads On   php_maxuploadsize Max upload size 256M   php_maxuploads Max uploads in a request 20    Example    This example playbook sets up a webserver with nginx and php-fpm.\n--- - hosts: jellyfish user: root roles: - role: geekoops-nginx vars: config_firewall: true firewall_zone: \u0026quot;public\u0026quot; - role: geekoops-php-fpm vars: apcu_enable: true apcu_shm_size: 32M php_memlimit: 256M php_maxuploadsize: 64M tasks: - name: Deploy jellyfish config for nginx copy: content: | server { listen 80 default_server; listen [::]:80 default_server; server_name jellyfish; location / { proxy_pass http://127.0.0.1:3000/; } } dest: \u0026quot;/etc/nginx/vhosts.d/jellyfish.conf\u0026quot; group: \u0026quot;root\u0026quot; owner: \u0026quot;root\u0026quot; mode: 0754 notify: Restart nginx handlers: - name: Restart nginx systemd: name: nginx state: restarted "},{"id":5,"href":"/posts/20210326-ansible-nginx/","title":"Ansible nginx","parent":"Posts","content":"Welcome to GeekOops! This is my first role of the project. The role is as simple as it suggests. It installs nginx and optionally opens the firewall ports.\nUsage example    Let\u0026rsquo;s assume we want to roll this role out on our imaginary jellyfish server. We need to have root ssh access to jellyfish. Ansible also supports sudo, but this is not covered here. So first make sure you can do the following\n# Make sure you can login into our imaginary test server as root! ssh root@jellyfish  All of the next steps will take place in a temporary directory. I in general keep all my ansible stuff in a dedicated ansible folder in my home directory, for this tutorial we are going to use a empty new folder, as you might want to dump everything afterwards.\n# For this tutorial we start in a virgin new folder mkdir jellyfish-sandbox cd jellyfish-sandbox  Now, clone the geekoops-nginx role\ngit clone https://github.com/GeekOops/geekoops-nginx  Ansible operates with so-called Playbooks. Playbooks are a yaml file that tell ansible what to do. Roughly it consists of a definition of which hosts ansible should operate on and what to do there. For this example we are going to use the following playbook, which you store as jellyfish.yml:\n--- # Example playbook for nginx on jellyfish - hosts: jellyfish user: root roles: - role: geekoops-nginx vars: setup_default_page: true default_page_hostname: \u0026quot;{{ansible_host}}\u0026quot; config_firewall: true firewall_zone: \u0026quot;public\u0026quot;  Last thing is to create a custom inventory. Although you might have put jellyfish into your ~/.ssh/config already, ansible needs also to know that this is a host for it. For that we create a file called inventory with this simple line:\njellyfish  Ok, when you have done that, then we\u0026rsquo;re ready to rock. Run ansible-playbook with the inventory and the playbook:\nansible-playbook -i inventory jellyfish.yml  Ansible now runs the playbook, nginx will be installed and the firewall will open the http (80) and https (443) port for you on the \u0026ldquo;public\u0026rdquo; zone.\n"},{"id":6,"href":"/categories/","title":"Categories","parent":"GeekOops","content":""},{"id":7,"href":"/tags/","title":"Tags","parent":"GeekOops","content":""}]